/************
数据结构与算法分析C++描述 
深度优先搜索算法的应用
查找图的割点
15年10月29日 
************/ 

#include <iostream>
using namespace std;
class ALGraph
{
	private:
		//内部类
		typedef int VertexType; 			//顶点类型
		class Vertex           				//邻接表顶点
		{
				int num;					//编号 
				int low;					//最低顶点，用于判断父节点是否为割点 
				bool visited;				//是否已经访问过 
				int adjVertex; 				//邻接表顶点指向的边
				Vertex *nextEdge;			//下一条边指针
				friend class ALGraph;		//声明为ALGraph友元类 
		};
		class HeadNode
		{
				VertexType data;			//顶点信息
				Vertex *firstEdge;			//指向第一条依附该边的顶点指针
				friend class ALGraph;		//声明为ALGraph友元类 
		};

	private:
		//类私有数据
		int vexNum; 						//图的顶点数
		HeadNode *adjList;					//指向邻接表的指针

	public:	
		//类公有成员函数 
		ALGraph();							//无参构造函数 
		~ALGraph();							//析构函数 
		ALGraph(int *array, int vexNum);	//有参构造函数 
		void printAdjList();				//打印邻接表 
		void findArt(Vertex v);						//查找图的割点 
	private:
		//类私有成员函数 
		void createAdjList(int *array); //通过数组创建邻接表 
};

ALGraph::ALGraph()
{
	cout << "输入图的顶点数" << endl;
	cin >> vexNum;

	cout << "请输入一个" << vexNum << "行" << vexNum <<
	     "列的关于图的邻接矩阵: " << endl;


	int array[vexNum * vexNum];  					//创建邻接矩阵(vexNum行vexNum列)
	int tempValue;										
	for(int i = 0; i < vexNum; i++)					 
		for(int j = 0; j < vexNum; j++)
		{
			cin >> tempValue;						//从屏幕读取数据
			*(array+i * vexNum + j)= tempValue;
		}
	createAdjList(array);
}

ALGraph::ALGraph(int *array, int vexNum)
{
	this->vexNum = vexNum;
	createAdjList(array);
}
void ALGraph::createAdjList(int *array)
{
	Vertex *p;
	adjList = new HeadNode[vexNum + 1]; 	//邻接表头结点数组
	for(int i = 1; i <= vexNum; i++) 		//初始化头结点数组,注意是从下标1开始
	{
		adjList[i].data = i;
		adjList[i].firstEdge = NULL;
	}

	for(int i = 0; i < vexNum; i++)
		for(int j = 0; j < vexNum; j++)
		{
			if(*(array + i*vexNum + j) == 1)
			{
				p = new Vertex();
				p->adjVertex = j + 1;
				p->nextEdge = adjList[i+1].firstEdge;
				adjList[i+1].firstEdge = p;
			}
		}
}

ALGraph::~ALGraph()
{
	//逐个delete邻接表内顶点 
	for (int i = 1; i <= vexNum; ++i)
	{
		Vertex * p = adjList[i].firstEdge;
		for (; p;)
		{
			Vertex * old = p;
			p = p->nextEdge;
			delete old;
		}
	}
	//delete图头结点数组 
	delete []adjList;
}

void ALGraph::printAdjList()
{
	for (int i = 1; i <= vexNum; ++i)
	{
		cout << i << " : ";
		Vertex * p = adjList[i].firstEdge;
		for (; p; p=p->nextEdge)
			cout << p->adjVertex << " ";
		cout << endl;
	}
}

void ALGraph::findArt(Vertex v)
{
	v.visited = true;
	v.low
}
int main()
{
	ALGraph g();
	return 0; 
}
